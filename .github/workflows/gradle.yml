# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java Gradle

on: [pull_request,push]
permissions:
  contents: write

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Cache Node.js dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-


      - name: Install Dependencies
        run: |
          if [ ! -d "node_modules" ]; then
            npm install axios
          fi

      - name: Build File
        run: |
          chmod +x gradlew 
          ./gradlew build

      - name: Upload File
        uses: actions/upload-artifact@v4
        with:
          name: HeliosClient
          path: build/libs

      - name: Release upload
        uses: softprops/action-gh-release@v2
        with:
                 tag_name: "latest"
                 name: "HeliosClient"
                 prerelease: true
                 fail_on_unmatched_files: true
                 generate_release_notes: true
                 body:
                     "Generated pre-release. Maybe unstable to use"
                 files: |
                      ./build/libs/*.jar

      - name: Build fail Notification
        if: ${{ failure() }}
        run: node .github/discordWebhook.js failure
        env:
            DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
            GITHUB_SHA: ${{ github.sha }}
            GITHUB_RUN_NUMBER: ${{ github.run_number }}
            GITHUB_REPOSITORY: ${{ github.repository }}
            PUSH_USER: ${{ github.actor }}


      - name: Build success Notification
        if: ${{ success() }}
        run: node .github/discordWebhook.js success
        env:
                DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
                GITHUB_SHA: ${{ github.sha }}
                GITHUB_RUN_NUMBER: ${{ github.run_number }}
                GITHUB_REPOSITORY: ${{ github.repository }}
                PUSH_USER: ${{ github.actor }}
                RUN_ID: ${{ github.run_id }}